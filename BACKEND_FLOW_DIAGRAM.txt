# BACKEND FLOW DIAGRAM - CRYPTO TRADING BOT
# ===========================================

## 1. SYSTEM STARTUP FLOW
```
main.py (Entry Point)
    ↓
setup_logging()
    ↓
TradingServer.__init__()
    ├── DatabaseManager()           # database.py
    ├── MarketDataManager()         # market_data.py
    ├── NewsAnalysisManager()       # news_analysis.py
    ├── AIAnalysisManager()         # ai_analysis.py
    ├── TradingBot()               # trading_bot.py
    ├── TradeExecutionManager()     # trade_execution.py
    ├── clients = set()            # WebSocket clients
    ├── analysis_enabled = False
    ├── analysis_start_time = None
    └── background_tasks = []
    ↓
server.start_server()
    ↓
websockets.serve(handle_client, Config.HOST, Config.PORT)
    ↓
start_background_tasks()
    ├── continuous_market_data_updates()
    ├── broadcast_price_updates()
    └── continuous_bot_monitoring() (if bot enabled)
```

## 2. WEBSOCKET CONNECTION FLOW
```
Client connects to ws://localhost:8765
    ↓
handle_client(websocket, path)
    ↓
clients.add(websocket)
    ↓
send_initial_data(websocket)
    ├── market_data.get_all_prices()
    ├── trade_execution.get_positions()
    ├── trade_execution.get_balance()
    └── trading_bot.get_bot_status()
    ↓
async for message in websocket:
    ↓
handle_message(websocket, data)
```

## 3. MESSAGE HANDLING FLOW
```
handle_message(websocket, data)
    ↓
message_type = data.get('type')
    ↓
SWITCH(message_type):
    ├── 'start_analysis' → start_analysis()
    ├── 'stop_analysis' → stop_analysis()
    ├── 'get_analysis_status' → get_analysis_status()
    ├── 'start_bot' → trading_bot.start_bot(config)
    ├── 'stop_bot' → trading_bot.stop_bot()
    ├── 'get_bot_status' → trading_bot.get_bot_status()
    ├── 'update_bot_config' → trading_bot.update_bot_config(config)
    ├── 'execute_trade' → trade_execution.execute_trade(trade_data)
    ├── 'close_position' → trade_execution.close_position(symbol)
    ├── 'get_positions' → trade_execution.get_positions()
    ├── 'get_balance' → trade_execution.get_balance()
    ├── 'get_trade_history' → trade_execution.get_trade_history()
    ├── 'get_crypto_data' → market_data.get_crypto_data()
    └── 'get_ai_analysis' → ai_analysis.get_analysis(symbol)
```

## 4. BOT STARTUP FLOW
```
start_bot(config)
    ↓
TradingBot.start_bot(config)
    ├── Check if bot_enabled = False
    ├── Update bot_config with new config
    ├── Reset daily trade counter if new day
    ├── Set bot_enabled = True
    ├── Set bot_start_time = current_time
    ├── Initialize pair_status for all allowed_pairs
    ├── Start AI analysis if not running
    └── Broadcast bot_status_update to all clients
    ↓
continuous_bot_monitoring() (Background Task)
    ↓
while bot_enabled:
    ├── Check for trading opportunities
    ├── Execute trades based on AI signals
    ├── Monitor active trades
    ├── Update trailing stops
    ├── Close positions on stop loss/profit target
    └── Sleep for trade_interval_secs
```

## 5. AI ANALYSIS FLOW
```
start_analysis()
    ↓
AIAnalysisManager.start_analysis()
    ├── Set analysis_enabled = True
    ├── Set analysis_start_time = current_time
    └── Broadcast analysis_status to all clients
    ↓
continuous_ai_monitoring() (Background Task)
    ↓
while analysis_enabled:
    ├── Fetch market data for target_pairs
    ├── Get technical indicators
    ├── Get news sentiment
    ├── Generate AI analysis using GPT/Claude
    ├── Calculate confidence scores
    ├── Check for high-confidence opportunities
    ├── Apply cooldown logic
    ├── Broadcast ai_insights to clients
    └── Sleep for analysis_interval (60 seconds)
```

## 6. TRADE EXECUTION FLOW
```
execute_trade(trade_data)
    ↓
TradeExecutionManager.execute_trade(trade_data)
    ├── Validate trade parameters
    ├── Check sufficient balance
    ├── Calculate position size
    ├── Update paper balance
    ├── Create position record
    ├── Log trade to database
    ├── Broadcast trade_executed to all clients
    └── Update positions
    ↓
close_position(symbol)
    ↓
TradeExecutionManager.close_position(symbol)
    ├── Find position by symbol
    ├── Calculate profit/loss
    ├── Update paper balance
    ├── Remove position
    ├── Log trade to database
    ├── Broadcast position_closed to all clients
    └── Update positions
```

## 7. MARKET DATA FLOW
```
continuous_market_data_updates() (Background Task)
    ↓
while True:
    ├── Fetch crypto prices from APIs
    ├── Update price_cache
    ├── Calculate price changes
    ├── Update market data
    └── Sleep for update interval
    ↓
broadcast_price_updates() (Background Task)
    ↓
while True:
    ├── Get current prices from price_cache
    ├── Create price_update message
    ├── Broadcast to all connected clients
    └── Sleep for broadcast interval
```

## 8. DATA BROADCASTING FLOW
```
broadcast_message(message_type, data)
    ↓
message = {
    'type': message_type,
    'data': data
}
    ↓
json_message = json.dumps(message)
    ↓
for client in clients:
    ├── Check if client is open
    ├── Send json_message
    └── Handle exceptions
```

## 9. BACKGROUND TASKS ARCHITECTURE
```
asyncio.gather(
    ├── continuous_market_data_updates()
    ├── broadcast_price_updates()
    ├── continuous_ai_monitoring()
    └── continuous_bot_monitoring()
)
```

## 10. SHUTDOWN FLOW
```
KeyboardInterrupt or Exception
    ↓
server.shutdown()
    ├── Set bot_enabled = False
    ├── Set analysis_enabled = False
    ├── Cancel all background tasks
    ├── Close all WebSocket connections
    ├── Close database connections
    └── Log shutdown message
```

## 11. CONFIGURATION STRUCTURE
```
config.py
    ├── HOST = "localhost"
    ├── PORT = 8765
    ├── PAPER_BALANCE = 100000.0
    ├── TARGET_PAIRS = ['BTCUSDT', 'ETHUSDT', ...]
    ├── ANALYSIS_INTERVAL = 60
    ├── HIGH_CONFIDENCE_THRESHOLD = 0.5
    ├── OPPORTUNITY_COOLDOWN_DURATION = 900
    ├── TRADE_REVERSAL_THRESHOLD = 0.02
    └── DEFAULT_BOT_CONFIG = {...}
```

## 12. DATABASE INTEGRATION
```
DatabaseManager
    ├── MongoDB connection
    ├── Trades collection
    ├── Positions collection
    ├── Analysis logs collection
    └── Bot logs collection
```

## 13. ERROR HANDLING FLOW
```
Exception occurs in any function
    ↓
try/except block catches exception
    ↓
logger.error(f"Error description: {e}")
    ↓
Send error message to client (if applicable)
    ↓
Continue operation or shutdown (depending on severity)
```

## 14. MESSAGE FORMATS

### Price Update Message:
```json
{
  "type": "price_update",
  "data": {
    "symbol": "BTC",
    "price": 45000.0,
    "change_24h": 2.5,
    "volume_24h": 25000000,
    "market_cap": 850000000000,
    "timestamp": 1640995200
  }
}
```

### Trade Executed Message:
```json
{
  "type": "trade_executed",
  "data": {
    "trade": {
      "trade_id": "trade_1640995200_BTC",
      "symbol": "BTC",
      "direction": "BUY",
      "amount": 0.1,
      "price": 45000.0,
      "value": 4500.0,
      "timestamp": 1640995200,
      "trade_type": "MANUAL",
      "status": "executed"
    },
    "new_balance": 95500.0,
    "positions": {
      "BTC": {
        "symbol": "BTC",
        "amount": 0.1,
        "entry_price": 45000.0,
        "current_price": 45000.0,
        "unrealized_pnl": 0.0
      }
    }
  }
}
```

### Bot Status Message:
```json
{
  "type": "bot_status",
  "data": {
    "enabled": true,
    "start_time": 1640995200,
    "active_trades": 2,
    "trades_today": 5,
    "total_profit": 150.0,
    "total_trades": 25,
    "winning_trades": 18,
    "win_rate": 0.72,
    "pair_status": {
      "BTCUSDT": "in_trade",
      "ETHUSDT": "idle"
    }
  }
}
```

## 15. FILE DEPENDENCIES
```
backend/
├── main.py                    # Entry point
├── config.py                  # Configuration
├── websocket_server.py        # Main server
├── database.py               # Database operations
├── market_data.py            # Market data fetching
├── news_analysis.py          # News sentiment analysis
├── ai_analysis.py            # AI analysis engine
├── trading_bot.py            # Trading bot logic
├── trade_execution.py        # Trade execution
└── technical_indicators.py   # Technical analysis
```

## 16. API INTEGRATIONS
```
External APIs:
├── CoinGecko API             # Crypto price data
├── OpenRouter API            # GPT/Claude AI models
├── CryptoPanic API           # News sentiment
├── Binance WebSocket         # Real-time price feeds
└── MongoDB                   # Data persistence
```

## 17. PERFORMANCE METRICS
```
Monitoring:
├── WebSocket connection count
├── Message processing latency
├── Trade execution success rate
├── AI analysis confidence scores
├── Bot profit/loss tracking
├── Database operation performance
└── Memory and CPU usage
```

## 18. SECURITY CONSIDERATIONS
```
Security Measures:
├── Input validation for all messages
├── Rate limiting on API calls
├── Error message sanitization
├── WebSocket connection validation
├── Database query parameterization
└── Environment variable protection
``` 